Basic PromQL Queries for understanding the Time Series Data for at any Instant Time:
1. To search all of the time series data points in your dashboard, run the following query  
    count({__name__=~".+"}) by (__name__)

2. To Search all of the time series data points grouping by job
    count({__name__=~".+"}) by (job)

4. To Search all of the time series data points grouping by metric for any particular job
    count({__name__=~".+",job="node-exporter"}) by (__name__)

5. To search for a specific time series point, add the relevant value to the query:
    {__name__=~"node.+"}

6. Searching a label inside a time series changes the query. You need to add the name of the time series, and the value youâ€™re looking for:
    kube_configmap_labels{namespace="metrics"}
    kube_configmap_labels{namespace=~"met.+"}
Range Vector Selectors:
Range vector literals work like instant vector literals, except that they select a range of samples back from the current instant. Syntactically, a time duration is appended in square brackets ([]) at the end of a vector selector to specify how far back in time values should be fetched for each resulting range vector element.

rate(v range-vector) calculates the per-second average rate of increase of the time series in the range vector

rate(kubelet_http_requests_total{job="kubelet"}[$__rate_interval])
Reference Documentation for other Functions:
https://prometheus.io/docs/prometheus/latest/querying/functions



This is my first commit
CI/CD Pipelines in Kubernetes: Integrating Kubernetes with CI/CD tools like Jenkins and Tekton.
Vulnerability Scanning: Using tools like Trivy for scanning container images for vulnerabilities.
Cloud Integration: Deploying and managing Kubernetes clusters on cloud providers such as AWS (EKS)
Helm: Utilizing Helm for packaging, deploying, and managing Kubernetes applications.
Network Policies: Restricting traffic between pods and controlling communication flows
Persistent Volumes (PVs): Understanding the concept of volumes, Persistent Volume Claims (PVCs), and storage classes.
StatefulSets: Managing stateful applications that require persistent storage.
Knowledge of application Operators
Service Meshes: Integrating service mesh technologies like Istio to manage microservice communications within Kubernetes.



Here's an example of a resume summary for someone with expertise in Kubernetes, OpenShift, and CI/CD:

Resume Summary:
A highly skilled and results-driven DevOps Engineer with extensive experience in Kubernetes, OpenShift, and CI/CD pipeline development. Proficient in deploying, managing, and scaling containerized applications in both cloud and on-premise environments. Expertise in designing and implementing automated pipelines for continuous integration and continuous delivery (CI/CD) to streamline development, testing, and deployment workflows.

Deep knowledge of Kubernetes architecture, including Pods, Deployments, StatefulSets, Services, ConfigMaps, and Persistent Volumes. Hands-on experience with OpenShift for enterprise-level Kubernetes orchestration, including its integrated CI/CD tools (OpenShift Pipelines, Jenkins, etc.). Skilled in using Helm for packaging and deploying applications and managing configurations in Kubernetes clusters.

Proficient in integrating GitOps practices with tools like ArgoCD for version-controlled deployments and seamless rollbacks. Strong experience with containerization technologies like Docker, along with monitoring and logging tools such as Prometheus, Grafana, and the EFK stack (Elasticsearch, Fluentd, Kibana).

Passionate about building scalable, reliable, and secure infrastructure, with a focus on automation, performance optimization, and best practices in cloud-native application deployment and management. Adept at troubleshooting complex issues and providing ongoing support to maintain high system availability and performance.
